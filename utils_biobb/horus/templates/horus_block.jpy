# Import all the required classes from the HorusAPI
import shutil
from pathlib import Path
from copy import deepcopy
import uuid
import os
from HorusAPI import PluginBlock, PluginVariable, VariableTypes


def create_unique_dir(path: str = "", prefix: str = "", number_attempts: int = 10) -> str:
    new_dir = prefix + str(uuid.uuid4())
    if path:
        new_dir = str(Path(path).joinpath(new_dir))
    for i in range(number_attempts):
        try:
            oldumask = os.umask(0)
            Path(new_dir).mkdir(mode=0o777, parents=True, exist_ok=False)
            print("%s directory successfully created" % new_dir)
            os.umask(oldumask)
            return new_dir
        except OSError:
            print(new_dir + " Already exists")
            print("Retrying %i times more" % (number_attempts - i))
            new_dir = prefix + str(uuid.uuid4().hex)
            if path:
                new_dir = str(Path(path).joinpath(new_dir))
                print("Trying with: " + new_dir)
    raise FileExistsError



######################
# Define INPUTS
# These variables will appear under the palced block.
# They expect to be conected to the outputs of other blocks
######################
{% for input in inputs %}
{{ input.name }} = PluginVariable(
    id="{{ input.name }}",  # ID of the variable, will allow us to identify the value
    name="{{ input.name }}",  # The name that will appear in the frontend
    description="{{ input.description }}",  # The description that will appear in the frontend
    type=VariableTypes.FILE,  # The type. This will render the variable accrodingly
    # The allowedValues parameter depends on the type of variable,
    # in the case of files, they denote the allowed extensions.
    allowedValues={{ input.extensions }}
)
{% endfor %}
{% for output in outputs %}
{{ output.name }} = PluginVariable(
    id="{{ output.name }}",  # ID of the variable, will allow us to identify the value
    name="{{ output.name }}",  # The name that will appear in the frontend
    description="{{ output.description }}",  # The description that will appear in the frontend
    type=VariableTypes.FILE,  # The type. This will render the variable accrodingly
    # The allowedValues parameter depends on the type of variable,
    # in the case of files, they denote the allowed extensions.
    allowedValues={{ output.extensions }},
    category="Output files"
)

{{ output.name }}_var = deepcopy({{ output.name }})
{{ output.name }}_var.id = "{{ output.name }}_var"
{% endfor %}
######################
# Define Variables
# These variables appear under the block "config" button
######################
{% for property in properties %}
{{property.name}} = PluginVariable(
    id="{{property.name}}",
    name="{{property.name}}",
    description="{{property.horus_description}}",
    defaultValue={{property.horus_default}},
    type={{property.horus_type}},
    category="Properties"
)
{% endfor %}
# Define the action that the block will perform
def {{ module_name }}_action(biobb_block: PluginBlock):

    # Create a unique directory for the sandbox
    sandbox_dir = create_unique_dir(biobb_block.config["sandbox"], "sandbox_")

    # It is better to have imports inside the function
    # because the environment gets cleaned up between each
    # of the blocks that run in the flow. Having the imports
    # inside will ensure integrity on the action of the block
    import subprocess
    import json

    # Obtain the variable values
    # biobb_block.inputs is just a dictionary with the ID of the variables as keys
    # and the value as the value the user enetered
    {% for input in inputs %}
    {{ input.name }}_value = biobb_block.inputs["{{ input.name }}"]
    {% endfor %}
    {% for output in outputs %}
    {{ output.name }}_value = biobb_block.variables["{{ output.name }}_var"]
    {% endfor %}
    # Define the properties for the biobb tool
    properties_values = {}
    {% for property in properties %}
    if biobb_block.variables["{{property.name}}"] is not None and biobb_block.variables["{{property.name}}"] != "":
        properties_values["{{property.name}}"] = biobb_block.variables["{{property.name}}"]
    {% endfor %}
    for key in list(properties_values.keys()):
        if properties_values[key] is None:
            del properties_values[key]
    properties = {"properties": properties_values}


    with open(Path(sandbox_dir).joinpath("{{module_name}}.json"), "w", encoding="utf-8") as f:
        json.dump(properties, f)

    # Get the executable and engine form the config
    executable = biobb_block.config["executable_path"]

    # Copy inputs to the tmp folder
    for key, value in biobb_block.inputs.items():
        if value is not None:
            shutil.copy(value, f"{Path(sandbox_dir).joinpath(Path(value).name)}")
            print(f"Copying {value} to {Path(sandbox_dir).joinpath(Path(value).name)}")

    input_files = []
    {% for input in inputs %}
    if {{input.name}}_value is not None:
        input_files.append("--{{ input.name }}")
        input_files.append(f"{Path(biobb_block.config['container_folder']).joinpath(Path({{input.name}}_value).name)}")
    {% endfor %}
    output_files = []
    {% for output in outputs %}
    if {{output.name}}_value is not None:
        output_files.append("--{{ output.name }}")
        output_files.append(f"{Path(biobb_block.config['container_folder']).joinpath(Path({{output.name}}_value).name)}")
    {% endfor %}
    # Call the docker biobb tool
    print(f"Running {executable} run -v {str(Path(sandbox_dir))}:{biobb_block.config['container_folder']} {{docker_image}} {{module_name}} --config {Path(biobb_block.config['container_folder']).joinpath('{{module_name}}.json')}")
    print(f"Input files: {input_files}")
    print(f"Output files: {output_files}")
    with subprocess.Popen(
        [
            executable,
            "run",
            "-v",
            f"{str(Path(sandbox_dir))}:{biobb_block.config['container_folder']}",
            "{{docker_image}}",
            "{{module_name}}",
            "--config",
            f"{Path(biobb_block.config['container_folder']).joinpath('{{module_name}}.json')}"
        ] + input_files + output_files,
        stdout=subprocess.PIPE,
        stderr=subprocess.STDOUT,
        universal_newlines=True,
    ) as process:
        if process.stdout is not None:
            for line in process.stdout:
                # printing anything inside the block action will
                # redirect the output to the Horus integrated terminal
                print(line)

        if process.stderr is not None:
            for line in process.stderr:
                print(line)

        process.wait()

        if process.returncode != 0:
            # Raising an exception inside the block action will display the block as with an error,
            # and will display the error inside the block
            raise Exception(
                process.stderr
                if process.stderr
                else "An error ocurred while running the flow"
            )


        {% for output in outputs %}
        # Copy the outputs to the output folder
        if {{output.name}}_value is not None:
            shutil.copy(f"{Path(sandbox_dir).joinpath(Path({{output.name}}_value).name)}", {{ output.name }}_value)
            print(f"Copying {Path(sandbox_dir).joinpath(Path({{output.name}}_value).name)} to {Path({{output.name}}_value)}")
            biobb_block.setOutput("{{output.name}}", {{output.name}}_value)
        {% endfor %}
        # If the block has any output, one can set its value using the ID of the output variable
        # and the corresponding value


# Define the block
inputs_list = []
outputs_list = []
outputs_var_list = []
variables_list = []
{% for input in inputs %}
inputs_list.append({{input.name}})
{% endfor %}
{% for output in outputs %}
outputs_list.append({{output.name}})
outputs_var_list.append({{output.name}}_var)
{% endfor %}
{% for property in properties %}
variables_list.append({{property.name}})
{% endfor %}

{{module_name}}_block = PluginBlock(
    # The name which will appear on the frontend
    name="{{module_name}}",
    # Its description
    description="{{short_description}}",
    # The action
    action={{module_name}}_action,
    # A list of inputs, variables and outputs
    inputs=inputs_list,
    variables=variables_list + outputs_var_list,
    outputs=outputs_list,
)