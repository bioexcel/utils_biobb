<tool id="biobb_gromacs_genion_ext" name="Genion" version="3.8.0" >
    <description>: Wrapper class for the GROMACS genion module.</description>
    <requirements>
        <requirement type="package"
        version="3.8.0"
        >biobb_gromacs</requirement>
    </requirements>
    <command detect_errors="aggressive"><![CDATA[
        
          ln -f -s ${input_tpr_path} ${input_tpr_path}_`echo $$`.${input_tpr_path.ext};
        
          ln -f -s ${input_top_zip_path} ${input_top_zip_path}_`echo $$`.${input_top_zip_path.ext};
        
          ln -f -s ${input_ndx_path} ${input_ndx_path}_`echo $$`.${input_ndx_path.ext};
        
        #if $config.sele == "option1":
            ln -s -f ${config.properties} ${config.properties}_`echo $$`.${config.properties.ext};
          #end if
        
        genion

        #if $config.sele == "option1":
            --config ${config.properties}.${config.properties.ext}
          #else if $config.sele == "option2":
            --config '${config.jsonstr}'
          #else if $config.sele == "option3":
            --config '__oc____dq__replaced_group__dq__:__dq__${properties.replaced_group}__dq__,__dq__neutral__dq__:${properties.neutral},__dq__concentration__dq__:${properties.concentration},__dq__seed__dq__:${properties.seed},__dq__gmx_lib__dq__:__dq__${properties.gmx_lib}__dq__,__dq__binary_path__dq__:__dq__${properties.binary_path}__dq____cc__'
          #end if
        
          #if str($input_tpr_path) != 'None':
            --input_tpr_path ${input_tpr_path}_`echo $$`.${input_tpr_path.ext}
          #end if
        
          #if str($input_top_zip_path) != 'None':
            --input_top_zip_path ${input_top_zip_path}_`echo $$`.${input_top_zip_path.ext}
          #end if
        
          #if str($input_ndx_path) != 'None':
            --input_ndx_path ${input_ndx_path}_`echo $$`.${input_ndx_path.ext}
          #end if
        
        
          --output_gro_path $outname_output_gro_path
        
          --output_top_zip_path $outname_output_top_zip_path
        ;          
        #if $config.sele == "option1":
            rm -f ${config.properties}_`echo $$`.${config.properties.ext};
          #end if
        
          rm -f ${input_tpr_path}_`echo $$`.${input_tpr_path.ext};
        
          rm -f ${input_top_zip_path}_`echo $$`.${input_top_zip_path.ext};
        
          rm -f ${input_ndx_path}_`echo $$`.${input_ndx_path.ext};
        
        
          if test -f $outname_output_gro_path; then mv $outname_output_gro_path $output_gro_path; fi;
        
          if test -f $outname_output_top_zip_path; then mv $outname_output_top_zip_path $output_top_zip_path; fi;
        
    ]]>
    </command>
    <inputs>
        
          <param name="input_tpr_path" type="data" format="tpr"  optional="False" label="input TPR file" help="Path to the input portable run input TPR file. Format: [input].tpr"/> 
        
          <param name="input_top_zip_path" type="data" format="zip"  optional="False" label="input ZIP file" help="Path the input TOP topology in zip format. Format: [input].zip"/> 
        
          <param name="input_ndx_path" type="data" format="ndx"  optional="True" label="input NDX file" help="Path to the input index NDX file. Format: [input].ndx"/> 
        
        
          <param name="outname_output_gro_path" type="text" value="mygenion.gro" 
              optional="False" label="output GRO name" 
              help="Path to the input structure GRO file Format: [output].gro "/>
        
          <param name="outname_output_top_zip_path" type="text" value="mygenion.zip" 
              optional="False" label="output ZIP name" 
              help="Path the output topology TOP and ITP files zipball Format: [output].zip "/>
        
        <conditional name="config">
            <param name="sele" type="select" label="Take tool settings:" help="Select where tool settings are to be read from">
              <option value="option3">Manual Input</option>
              <option value="option1">from configuration file</option>
              <option value="option2">from JSON string</option>
            </param>
            <when value="option1">
              <param name="properties" type="data" format="yml,json" optional="false" label="Configuration file" help="File containing tool settings. See below for the syntax"/>
            </when>
            <when value="option2">
              <param name="jsonstr" type="text" value="{}" optional="false" label="JSON string" help="JSON string containing tool settings. See below for the syntax"/>
            </when>
            <when value="option3">
            </when>
          </conditional>
          <section name="properties" title="Properties Input">
            
              <param name="replaced_group" type="text" label="replaced_group" help="Group of molecules that will be replaced by the solvent." optional="false"
                  value="SOL"
                >
                  <sanitizer><valid initial="string.printable"/></sanitizer>
                </param>
            
              <param name="neutral" type="boolean" 
                  
                  label="neutral" help="Neutralize the charge of the system." 
                />
            
              <param name="concentration" type="float" 
                  value="0.05"
                  
                  label="concentration" help="Concentration of the ions in (mol/liter)." optional="false"/>
            
              <param name="seed" type="integer" 
                  value="1993"
                  
                  label="seed" help="Seed for random number generator." optional="false"/>
            
              <param name="gmx_lib" type="text" label="gmx_lib" help="Path set GROMACS GMXLIB environment variable." optional="true"
                  
                >
                  <sanitizer><valid initial="string.printable"/></sanitizer>
                </param>
            
              <param name="binary_path" type="text" label="binary_path" help="Path to the GROMACS executable binary." optional="false"
                  value="gmx"
                >
                  <sanitizer><valid initial="string.printable"/></sanitizer>
                </param>
                    
          </section>
    </inputs>
    <outputs>
        
        
          <data name="output_gro_path" format="gro" label="${outname_output_gro_path}"/>
        
        
          <data name="output_top_zip_path" format="zip" label="${outname_output_top_zip_path}"/>
        
    </outputs>
    <tests>
        <test>
        </test>
    </tests>    
    <help>
.. class:: infomark
        
Check the syntax for the tool parameters at the original library documentation: https://biobb_gromacs.readthedocs.io/en/latest

-----

.. image:: http://mmb.irbbarcelona.org/biobb/assets/layouts/layout3/img/logo.png    
    :width: 150

**https://mmb.irbbarcelona.org/biobb**
        
.. image:: https://bioexcel.eu/wp-content/uploads/2019/08/Bioexcel_logo_no_subheading_660px.png
        :width: 150
        
**https://bioexcel.eu**
   </help>

    <citations>
        <citation type="bibtex">
            @misc{githubbiobb,
            author = {Andrio P, Bayarri, G., Hospital A, Gelpi JL},
            year = {2019-21},
            title = {biobb: BioExcel building blocks },
            publisher = {GitHub},
            journal = {GitHub repository},
            url = {https://github.com/bioexcel/biobb_gromacs},
            }
        </citation>
        <citation type="doi">10.1038/s41597-019-0177-4</citation>
    </citations>
</tool>