<tool id="biobb_bioml_predict_ext" name="Predict" version="0.1" >
    <description>: Wrapper class for the bioml Predict module.</description>
    <requirements>
        <requirement type="package"
        version="0.1"
        >biobb_bioml</requirement>
    </requirements>
    <command detect_errors="aggressive"><![CDATA[
        
          ln -f -s ${input_excel} ${input_excel}_`echo $$`.${input_excel.ext};
        
          ln -f -s ${input_fasta} ${input_fasta}_`echo $$`.${input_fasta.ext};
        
          ln -f -s ${extracted} ${extracted}_`echo $$`.${extracted.ext};
        
        #if $config.sele == "option1":
            ln -s -f ${config.properties} ${config.properties}_`echo $$`.${config.properties.ext};
          #end if
        
        predict

        #if $config.sele == "option1":
            --config ${config.properties}.${config.properties.ext}
          #else if $config.sele == "option2":
            --config '${config.jsonstr}'
          #else if $config.sele == "option3":
            --config '__oc____dq__scaler__dq__:__dq__${properties.scaler}__dq__,__dq__model_output__dq__:__dq__${properties.model_output}__dq__,__dq__prediction_threshold__dq__:${properties.prediction_threshold},__dq__extracted__dq__:__dq__${properties.extracted}__dq__,__dq__number_similar_samples__dq__:${properties.number_similar_samples}__cc__'
          #end if
        
          #if str($input_excel) != 'None':
            --input_excel ${input_excel}_`echo $$`.${input_excel.ext}
          #end if
        
          #if str($input_fasta) != 'None':
            --input_fasta ${input_fasta}_`echo $$`.${input_fasta.ext}
          #end if
        
          #if str($extracted) != 'None':
            --extracted ${extracted}_`echo $$`.${extracted.ext}
          #end if
        
        
          --prediction_results $outname_prediction_results
        ;          
        #if $config.sele == "option1":
            rm -f ${config.properties}_`echo $$`.${config.properties.ext};
          #end if
        
          rm -f ${input_excel}_`echo $$`.${input_excel.ext};
        
          rm -f ${input_fasta}_`echo $$`.${input_fasta.ext};
        
          rm -f ${extracted}_`echo $$`.${extracted.ext};
        
        
          if test -f $outname_prediction_results; then mv $outname_prediction_results $prediction_results; fi;
        
    ]]>
    </command>
    <inputs>
        
          <param name="input_excel" type="data" format="XLSX"  optional="False" label="input XLSX file" help="The file to where the selected features are saved in excel format. Format: [input].XLSX"/> 
        
          <param name="input_fasta" type="data" format="FASTA"  optional="False" label="input FASTA file" help="The fasta file path. Format: [input].FASTA"/> 
        
          <param name="extracted" type="data" format="XLSX"  optional="False" label="input XLSX file" help="The file where the extracted features from the new data are stored. Format: [input].XLSX"/> 
        
        
          <param name="outname_prediction_results" type="text" value="mypredict.ZIP" 
              optional="False" label="output ZIP name" 
              help="The zip file where the extracted features from the new data are stored Format: [output].ZIP "/>
        
        <conditional name="config">
            <param name="sele" type="select" label="Take tool settings:" help="Select where tool settings are to be read from">
              <option value="option3">Manual Input</option>
              <option value="option1">from configuration file</option>
              <option value="option2">from JSON string</option>
            </param>
            <when value="option1">
              <param name="properties" type="data" format="yml,json" optional="false" label="Configuration file" help="File containing tool settings. See below for the syntax"/>
            </when>
            <when value="option2">
              <param name="jsonstr" type="text" value="{}" optional="false" label="JSON string" help="JSON string containing tool settings. See below for the syntax"/>
            </when>
            <when value="option3">
            </when>
          </conditional>
          <section name="properties" title="Properties Input">
            
              <param name="scaler" type="text" label="scaler" help="Choose one of the scaler available in scikit-learn, defaults to RobustScaler." optional="false"
                  value="robust"
                >
                  <sanitizer><valid initial="string.printable"/></sanitizer>
                </param>
            
              <param name="model_output" type="text" label="model_output" help="The directory for the generated models." optional="false"
                  value="models"
                >
                  <sanitizer><valid initial="string.printable"/></sanitizer>
                </param>
            
              <param name="prediction_threshold" type="float" 
                  value="1.0"
                  
                  label="prediction_threshold" help="Between 0.5 and 1 and determines what considers to be a positive prediction, if 1 only those predictions where all models agrees are considered to be positive." optional="false"/>
            
              <param name="extracted" type="text" label="extracted" help="The file where the extracted features from the new data are stored." optional="false"
                  value="extracted_features/new_features.xlsx"
                >
                  <sanitizer><valid initial="string.printable"/></sanitizer>
                </param>
            
              <param name="number_similar_samples" type="integer" 
                  value="1"
                  
                  label="number_similar_samples" help="The number of similar training samples to filter the predictions." optional="false"/>
                    
          </section>
    </inputs>
    <outputs>
        
        
          <data name="prediction_results" format="ZIP" label="${outname_prediction_results}"/>
        
    </outputs>
    <tests>
        <test>
        </test>
    </tests>    
    <help>
.. class:: infomark
        
Check the syntax for the tool parameters at the original library documentation: https://biobb_bioml.readthedocs.io/en/latest

-----

.. image:: http://mmb.irbbarcelona.org/biobb/assets/layouts/layout3/img/logo.png    
    :width: 150

**https://mmb.irbbarcelona.org/biobb**
        
.. image:: https://bioexcel.eu/wp-content/uploads/2019/08/Bioexcel_logo_no_subheading_660px.png
        :width: 150
        
**https://bioexcel.eu**
   </help>

    <citations>
        <citation type="bibtex">
            @misc{githubbiobb,
            author = {Andrio P, Bayarri, G., Hospital A, Gelpi JL},
            year = {2019-21},
            title = {biobb: BioExcel building blocks },
            publisher = {GitHub},
            journal = {GitHub repository},
            url = {https://github.com/bioexcel/biobb_bioml},
            }
        </citation>
        <citation type="doi">10.1038/s41597-019-0177-4</citation>
    </citations>
</tool>