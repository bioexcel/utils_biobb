<tool id="biobb_bioml_generate_model_ext" name="GenerateModel" version="0.1" >
    <description>: Wrapper class for the bioml Generate model module.</description>
    <requirements>
        <requirement type="package"
        version="0.1"
        >biobb_bioml</requirement>
    </requirements>
    <command detect_errors="aggressive"><![CDATA[
        
          ln -f -s ${input_excel} ${input_excel}_`echo $$`.${input_excel.ext};
        
          ln -f -s ${input_hyperparameter} ${input_hyperparameter}_`echo $$`.${input_hyperparameter.ext};
        
          ln -f -s ${sheets} ${sheets}_`echo $$`.${sheets.ext};
        
          ln -f -s ${label} ${label}_`echo $$`.${label.ext};
        
        #if $config.sele == "option1":
            ln -s -f ${config.properties} ${config.properties}_`echo $$`.${config.properties.ext};
          #end if
        
        generate_model

        #if $config.sele == "option1":
            --config ${config.properties}.${config.properties.ext}
          #else if $config.sele == "option2":
            --config '${config.jsonstr}'
          #else if $config.sele == "option3":
            --config '__oc____dq__num_thread__dq__:${properties.num_thread},__dq__scaler__dq__:__dq__${properties.scaler}__dq__,__dq__label__dq__:__dq__${properties.label}__dq__,__dq__outliers__dq__:__dq__${properties.outliers}__dq____cc__'
          #end if
        
          #if str($input_excel) != 'None':
            --input_excel ${input_excel}_`echo $$`.${input_excel.ext}
          #end if
        
          #if str($input_hyperparameter) != 'None':
            --input_hyperparameter ${input_hyperparameter}_`echo $$`.${input_hyperparameter.ext}
          #end if
        
          #if str($sheets) != 'None':
            --sheets ${sheets}_`echo $$`.${sheets.ext}
          #end if
        
          #if str($label) != 'None':
            --label ${label}_`echo $$`.${label.ext}
          #end if
        
        
          --output_model $outname_output_model
        ;          
        #if $config.sele == "option1":
            rm -f ${config.properties}_`echo $$`.${config.properties.ext};
          #end if
        
          rm -f ${input_excel}_`echo $$`.${input_excel.ext};
        
          rm -f ${input_hyperparameter}_`echo $$`.${input_hyperparameter.ext};
        
          rm -f ${sheets}_`echo $$`.${sheets.ext};
        
          rm -f ${label}_`echo $$`.${label.ext};
        
        
          if test -f $outname_output_model; then mv $outname_output_model $output_model; fi;
        
    ]]>
    </command>
    <inputs>
        
          <param name="input_excel" type="data" format="XLSX"  optional="False" label="input XLSX file" help="The file to where the selected features are saved in excel format. Format: [input].XLSX"/> 
        
          <param name="input_hyperparameter" type="data" format="XLSX"  optional="False" label="input XLSX file" help="Hyperparameter file. Format: [input].XLSX"/> 
        
          <param name="sheets" type="data" format="STRING"  optional="False" label="input STRING file" help="Names or index of the selected sheets for both features and hyperparameters and the index of the models in this format-&gt; sheet (name, index):index model1,index model2 without the spaces. If only index or name of the sheets, it is assumed that all kfold models are selected. It is possible to have kfold indices in one sheet and in another ones without. Format: [input].STRING"/> 
        
          <param name="label" type="data" format="CSV"  optional="False" label="input CSV file" help="The path to the labels of the training set in a csv format. Format: [input].CSV"/> 
        
        
          <param name="outname_output_model" type="text" value="mygenerate_model.ZIP" 
              optional="False" label="output ZIP name" 
              help="The directory for the generated models Format: [output].ZIP "/>
        
        <conditional name="config">
            <param name="sele" type="select" label="Take tool settings:" help="Select where tool settings are to be read from">
              <option value="option3">Manual Input</option>
              <option value="option1">from configuration file</option>
              <option value="option2">from JSON string</option>
            </param>
            <when value="option1">
              <param name="properties" type="data" format="yml,json" optional="false" label="Configuration file" help="File containing tool settings. See below for the syntax"/>
            </when>
            <when value="option2">
              <param name="jsonstr" type="text" value="{}" optional="false" label="JSON string" help="JSON string containing tool settings. See below for the syntax"/>
            </when>
            <when value="option3">
            </when>
          </conditional>
          <section name="properties" title="Properties Input">
            
              <param name="num_thread" type="integer" 
                  value="10"
                  
                  label="num_thread" help="The number of threads to use for the parallelization of outlier detection." optional="false"/>
            
              <param name="scaler" type="text" label="scaler" help="Choose one of the scaler available in scikit-learn, defaults to RobustScaler." optional="false"
                  value="robust"
                >
                  <sanitizer><valid initial="string.printable"/></sanitizer>
                </param>
            
              <param name="label" type="text" label="label" help="The path to the labels of the training set in a csv format." optional="true"
                  
                >
                  <sanitizer><valid initial="string.printable"/></sanitizer>
                </param>
            
              <param name="outliers" type="text" label="outliers" help="A list of outliers if any, the name should be the same as in the excel file with the filtered features, you can also specify the path to a file in plain text format, each record should be in a new line." optional="true"
                  
                >
                  <sanitizer><valid initial="string.printable"/></sanitizer>
                </param>
                    
          </section>
    </inputs>
    <outputs>
        
        
          <data name="output_model" format="ZIP" label="${outname_output_model}"/>
        
    </outputs>
    <tests>
        <test>
        </test>
    </tests>    
    <help>
.. class:: infomark
        
Check the syntax for the tool parameters at the original library documentation: https://biobb_bioml.readthedocs.io/en/latest

-----

.. image:: http://mmb.irbbarcelona.org/biobb/assets/layouts/layout3/img/logo.png    
    :width: 150

**https://mmb.irbbarcelona.org/biobb**
        
.. image:: https://bioexcel.eu/wp-content/uploads/2019/08/Bioexcel_logo_no_subheading_660px.png
        :width: 150
        
**https://bioexcel.eu**
   </help>

    <citations>
        <citation type="bibtex">
            @misc{githubbiobb,
            author = {Andrio P, Bayarri, G., Hospital A, Gelpi JL},
            year = {2019-21},
            title = {biobb: BioExcel building blocks },
            publisher = {GitHub},
            journal = {GitHub repository},
            url = {https://github.com/bioexcel/biobb_bioml},
            }
        </citation>
        <citation type="doi">10.1038/s41597-019-0177-4</citation>
    </citations>
</tool>