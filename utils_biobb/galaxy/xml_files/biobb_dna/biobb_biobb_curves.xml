<tool id="biobb_dna_biobb_curves_ext" name="BiobbCurves" version="3.7.1" >
    <description>: Wrapper for the Cur+ executable  that is part of the Curves+ software suite.</description>
    <requirements>
        <requirement type="package"
        version="3.7.1"
        >biobb_dna</requirement>
    </requirements>
    <command detect_errors="aggressive"><![CDATA[
        
          ln -f -s ${input_struc_path} ${input_struc_path}_`echo $$`.${input_struc_path.ext};
        
          ln -f -s ${input_top_path} ${input_top_path}_`echo $$`.${input_top_path.ext};
        
        #if $config.sele == "option1":
            ln -s -f ${config.properties} ${config.properties}_`echo $$`.${config.properties.ext};
          #end if
        
        biobb_curves

        #if $config.sele == "option1":
            --config ${config.properties}.${config.properties.ext}
          #else if $config.sele == "option2":
            --config '${config.jsonstr}'
          #else if $config.sele == "option3":
            --config '__oc____dq__s1range__dq__:__dq__${properties.s1range}__dq__,__dq__s2range__dq__:__dq__${properties.s2range}__dq__,__dq__stdlib_path__dq__:__dq__${properties.stdlib_path}__dq__,__dq__itst__dq__:${properties.itst},__dq__itnd__dq__:${properties.itnd},__dq__itdel__dq__:${properties.itdel},__dq__ions__dq__:${properties.ions},__dq__test__dq__:${properties.test},__dq__line__dq__:${properties.line},__dq__fit__dq__:${properties.fit},__dq__axfrm__dq__:${properties.axfrm},__dq__curves_exec__dq__:__dq__${properties.curves_exec}__dq____cc__'
          #end if
        
          #if str($input_struc_path) != 'None':
            --input_struc_path ${input_struc_path}_`echo $$`.${input_struc_path.ext}
          #end if
        
          #if str($input_top_path) != 'None':
            --input_top_path ${input_top_path}_`echo $$`.${input_top_path.ext}
          #end if
        
        
          --output_cda_path $outname_output_cda_path
        
          --output_lis_path $outname_output_lis_path
        
          --output_zip_path $outname_output_zip_path
        ;          
        #if $config.sele == "option1":
            rm -f ${config.properties}_`echo $$`.${config.properties.ext};
          #end if
        
          rm -f ${input_struc_path}_`echo $$`.${input_struc_path.ext};
        
          rm -f ${input_top_path}_`echo $$`.${input_top_path.ext};
        
        
          if test -f $outname_output_cda_path; then mv $outname_output_cda_path $output_cda_path; fi;
        
          if test -f $outname_output_lis_path; then mv $outname_output_lis_path $output_lis_path; fi;
        
          if test -f $outname_output_zip_path; then mv $outname_output_zip_path $output_zip_path; fi;
        
    ]]>
    </command>
    <inputs>
        
          <param name="input_struc_path" type="data" format="trj,pdb"  optional="False" label="input TRJ,PDB file" help="Trajectory or PDB input file. Format: [input].[format]"/> 
        
          <param name="input_top_path" type="data" format="top"  optional="True" label="input TOP file" help="Topology file, needed along with .trj file (optional). Format: [input].top"/> 
        
        
          <param name="outname_output_cda_path" type="text" value="mybiobb_curves.cda" 
              optional="False" label="output CDA name" 
              help="Filename for Curves+ output .cda file Format: [output].cda "/>
        
          <param name="outname_output_lis_path" type="text" value="mybiobb_curves.lis" 
              optional="False" label="output LIS name" 
              help="Filename for Curves+ output .lis file Format: [output].lis "/>
        
          <param name="outname_output_zip_path" type="text" value="mybiobb_curves.zip" 
              optional="True" label="output ZIP name" 
              help="Filename for .zip files containing Curves+ output that is not .cda or .lis files Format: [output].zip "/>
        
        <conditional name="config">
            <param name="sele" type="select" label="Take tool settings:" help="Select where tool settings are to be read from">
              <option value="option3">Manual Input</option>
              <option value="option1">from configuration file</option>
              <option value="option2">from JSON string</option>
            </param>
            <when value="option1">
              <param name="properties" type="data" format="yml,json" optional="false" label="Configuration file" help="File containing tool settings. See below for the syntax"/>
            </when>
            <when value="option2">
              <param name="jsonstr" type="text" value="{}" optional="false" label="JSON string" help="JSON string containing tool settings. See below for the syntax"/>
            </when>
            <when value="option3">
            </when>
          </conditional>
          <section name="properties" title="Properties Input">
            
              <param name="s1range" type="text" label="s1range" help="Range of first strand. Must be specified in the form &#34;start:end&#34;." optional="true"
                  
                >
                  <sanitizer><valid initial="string.printable"/></sanitizer>
                </param>
            
              <param name="s2range" type="text" label="s2range" help="Range of second strand. Must be specified in the form &#34;start:end&#34;." optional="true"
                  
                >
                  <sanitizer><valid initial="string.printable"/></sanitizer>
                </param>
            
              <param name="stdlib_path" type="text" label="stdlib_path" help="Path to Curves&#39; standard library files for nucleotides. If not specified will look for &#39;standard&#39; files in current directory." optional="false"
                  value="standard"
                >
                  <sanitizer><valid initial="string.printable"/></sanitizer>
                </param>
            
              <param name="itst" type="integer" 
                  value="0"
                  
                  label="itst" help="Iteration start index." optional="true"/>
            
              <param name="itnd" type="integer" 
                  value="0"
                  
                  label="itnd" help="Iteration end index." optional="true"/>
            
              <param name="itdel" type="integer" 
                  value="1"
                  
                  label="itdel" help="Iteration delimiter." optional="false"/>
            
              <param name="ions" type="boolean" 
                  
                  label="ions" help="If True, helicoidal analysis of ions (or solvent molecules) around solute is carried out." 
                />
            
              <param name="test" type="boolean" 
                  
                  label="test" help="If True, provide addition output in .lis file on fitting and axis generation." 
                />
            
              <param name="line" type="boolean" 
                  
                  label="line" help="if True, find the best linear helical axis." 
                />
            
              <param name="fit" type="boolean" 
                  
                  label="fit" help="if True, fit a standard bases to the input coordinates (important for MD snapshots to avoid base distortions leading to noisy helical parameters)." 
                />
            
              <param name="axfrm" type="boolean" 
                  
                  label="axfrm" help="if True, generates closely spaced helical axis frames as input for Canal and Canion." 
                />
            
              <param name="curves_exec" type="text" label="curves_exec" help="Path to Curves+ executable, otherwise the program wil look for Cur+ executable in the binaries folder." optional="false"
                  value="Cur+"
                >
                  <sanitizer><valid initial="string.printable"/></sanitizer>
                </param>
                    
          </section>
    </inputs>
    <outputs>
        
        
          <data name="output_cda_path" format="cda" label="${outname_output_cda_path}"/>
        
        
          <data name="output_lis_path" format="lis" label="${outname_output_lis_path}"/>
        
        
          <data name="output_zip_path" format="zip" label="${outname_output_zip_path}"/>
        
    </outputs>
    <tests>
        <test>
        
        <param name="input_struc_path" value="biobb_dna/curvesplus/structure.stripped.trj" />
        
        <param name="input_top_path" value="biobb_dna/curvesplus/structure.stripped.top" />
        
        <param name="s1range" value="1:12" />
        
        
        <output name="output_cda_path" file="biobb_dna/Curves/curves_output.cda" />
        
        <output name="output_lis_path" file="biobb_dna/Curves/curves_output.lis" />
        
        </test>
    </tests>    
    <help>
.. class:: infomark
        
Check the syntax for the tool parameters at the original library documentation: https://biobb_dna.readthedocs.io/en/latest

-----

.. image:: http://mmb.irbbarcelona.org/biobb/assets/layouts/layout3/img/logo.png    
    :width: 150

**https://mmb.irbbarcelona.org/biobb**
        
.. image:: https://bioexcel.eu/wp-content/uploads/2019/08/Bioexcel_logo_no_subheading_660px.png
        :width: 150
        
**https://bioexcel.eu**
   </help>

    <citations>
        <citation type="bibtex">
            @misc{githubbiobb,
            author = {Andrio P, Bayarri, G., Hospital A, Gelpi JL},
            year = {2019-21},
            title = {biobb: BioExcel building blocks },
            publisher = {GitHub},
            journal = {GitHub repository},
            url = {https://github.com/bioexcel/biobb_dna},
            }
        </citation>
        <citation type="doi">10.1038/s41597-019-0177-4</citation>
    </citations>
</tool>