<tool id="biobb_pmx_pmxatom_mapping_ext" name="PmxatomMapping" version="4.2.1" >
    <description>: Wrapper class for the PMX atom_mapping module.</description>
    <requirements>
        <requirement type="package"
        version="4.2.1"
        >biobb_pmx</requirement>
    </requirements>
    <command detect_errors="aggressive"><![CDATA[
        
          ln -f -s ${input_structure1_path} ${input_structure1_path}_`echo $$`.${input_structure1_path.ext};
        
          ln -f -s ${input_structure2_path} ${input_structure2_path}_`echo $$`.${input_structure2_path.ext};
        
        #if $config.sele == "option1":
            ln -s -f ${config.properties} ${config.properties}_`echo $$`.${config.properties.ext};
          #end if

        pmxatom_mapping

        #if $config.sele == "option1":
            --config ${config.properties}_`echo $$`.${config.properties.ext}
          #else if $config.sele == "option2":
            --config '${config.jsonstr}'
          #else if $config.sele == "option3":
            --config '__oc____dq__noalignment__dq__:${properties.noalignment},__dq__nomcs__dq__:${properties.nomcs},__dq__noH2H__dq__:${properties.noH2H},__dq__H2Hpolar__dq__:${properties.H2Hpolar},__dq__H2Heavy__dq__:${properties.H2Heavy},__dq__RingsOnly__dq__:${properties.RingsOnly},__dq__dMCS__dq__:${properties.dMCS},__dq__swap__dq__:${properties.swap},__dq__nochirality__dq__:${properties.nochirality},__dq__distance__dq__:${properties.distance},__dq__timeout__dq__:${properties.timeout}__cc__'
          #end if
        
          #if str($input_structure1_path) != 'None':
            --input_structure1_path ${input_structure1_path}_`echo $$`.${input_structure1_path.ext}
          #end if
        
          #if str($input_structure2_path) != 'None':
            --input_structure2_path ${input_structure2_path}_`echo $$`.${input_structure2_path.ext}
          #end if
        
        
          --output_pairs1_path $outname_output_pairs1_path
        
          --output_pairs2_path $outname_output_pairs2_path
        
          --output_log_path $outname_output_log_path
        
          --output_structure1_path $outname_output_structure1_path
        
          --output_structure2_path $outname_output_structure2_path
        
          --output_morph1_path $outname_output_morph1_path
        
          --output_morph2_path $outname_output_morph2_path
        
          --output_scaffold1_path $outname_output_scaffold1_path
        
          --output_scaffold2_path $outname_output_scaffold2_path
        
          --output_score_path $outname_output_score_path
        ;
        #if $config.sele == "option1":
            rm -f ${config.properties}_`echo $$`.${config.properties.ext};
          #end if
        
          rm -f ${input_structure1_path}_`echo $$`.${input_structure1_path.ext};
        
          rm -f ${input_structure2_path}_`echo $$`.${input_structure2_path.ext};
        
        
          if test -f $outname_output_pairs1_path; then mv $outname_output_pairs1_path $output_pairs1_path; fi;
        
          if test -f $outname_output_pairs2_path; then mv $outname_output_pairs2_path $output_pairs2_path; fi;
        
          if test -f $outname_output_log_path; then mv $outname_output_log_path $output_log_path; fi;
        
          if test -f $outname_output_structure1_path; then mv $outname_output_structure1_path $output_structure1_path; fi;
        
          if test -f $outname_output_structure2_path; then mv $outname_output_structure2_path $output_structure2_path; fi;
        
          if test -f $outname_output_morph1_path; then mv $outname_output_morph1_path $output_morph1_path; fi;
        
          if test -f $outname_output_morph2_path; then mv $outname_output_morph2_path $output_morph2_path; fi;
        
          if test -f $outname_output_scaffold1_path; then mv $outname_output_scaffold1_path $output_scaffold1_path; fi;
        
          if test -f $outname_output_scaffold2_path; then mv $outname_output_scaffold2_path $output_scaffold2_path; fi;
        
          if test -f $outname_output_score_path; then mv $outname_output_score_path $output_score_path; fi;
        
    ]]>
    </command>
    <inputs>
        
          <param name="input_structure1_path" type="data" format="pdb"  optional="False" label="input PDB file" help="Path to the input ligand structure file 1. Format: [input].pdb"/>
        
          <param name="input_structure2_path" type="data" format="pdb"  optional="False" label="input PDB file" help="Path to the input ligand structure file 2. Format: [input].pdb"/>
        
        
          <param name="outname_output_pairs1_path" type="text" value="mypmxatom_mapping.dat"
              optional="False" label="output DAT,TXT name"
              help="Path to the output pairs for the ligand structure 1 Format: [output].[format] "/>
        
          <param name="outname_output_pairs2_path" type="text" value="mypmxatom_mapping.dat"
              optional="False" label="output DAT,TXT name"
              help="Path to the output pairs for the ligand structure 2 Format: [output].[format] "/>
        
          <param name="outname_output_log_path" type="text" value="mypmxatom_mapping.log"
              optional="False" label="output LOG,TXT,OUT name"
              help="Path to the log file Format: [output].[format] "/>
        
          <param name="outname_output_structure1_path" type="text" value="mypmxatom_mapping.pdb"
              optional="True" label="output PDB name"
              help="Path to the superimposed structure for the ligand structure 1 Format: [output].pdb "/>
        
          <param name="outname_output_structure2_path" type="text" value="mypmxatom_mapping.pdb"
              optional="True" label="output PDB name"
              help="Path to the superimposed structure for the ligand structure 2 Format: [output].pdb "/>
        
          <param name="outname_output_morph1_path" type="text" value="mypmxatom_mapping.pdb"
              optional="True" label="output PDB name"
              help="Path to the morphable atoms for the ligand structure 1 Format: [output].pdb "/>
        
          <param name="outname_output_morph2_path" type="text" value="mypmxatom_mapping.pdb"
              optional="True" label="output PDB name"
              help="Path to the morphable atoms for the ligand structure 2 Format: [output].pdb "/>
        
          <param name="outname_output_scaffold1_path" type="text" value="mypmxatom_mapping.ndx"
              optional="True" label="output NDX name"
              help="Path to the index of atoms to consider for the ligand structure 1 Format: [output].ndx "/>
        
          <param name="outname_output_scaffold2_path" type="text" value="mypmxatom_mapping.ndx"
              optional="True" label="output NDX name"
              help="Path to the index of atoms to consider for the ligand structure 2 Format: [output].ndx "/>
        
          <param name="outname_output_score_path" type="text" value="mypmxatom_mapping.dat"
              optional="True" label="output DAT,TXT name"
              help="Path to the morphing score Format: [output].[format] "/>
        
        <conditional name="config">
            <param name="sele" type="select" label="Take tool settings:" help="Select where tool settings are to be read from">
              <option value="option3">Manual Input</option>
              <option value="option1">from configuration file</option>
              <option value="option2">from JSON string</option>
            </param>
            <when value="option1">
              <param name="properties" type="data" format="yml,json" optional="false" label="Configuration file" help="File containing tool settings. See below for the syntax"/>
            </when>
            <when value="option2">
              <param name="jsonstr" type="text" value="{}" optional="false" label="JSON string" help="JSON string containing tool settings. See below for the syntax"/>
            </when>
            <when value="option3">
            </when>
          </conditional>
          <section name="properties" title="Properties Input">
            
              <param name="noalignment" type="boolean"
                  
                  label="noalignment" help="Should the alignment method be disabled."
                />
            
              <param name="nomcs" type="boolean"
                  
                  label="nomcs" help="Should the MCS method be disabled."
                />
            
              <param name="noH2H" type="boolean"
                  checked="true"
                  label="noH2H" help="Should non-polar hydrogens be discarded from morphing into any other hydrogen."
                />
            
              <param name="H2Hpolar" type="boolean"
                  
                  label="H2Hpolar" help="Should polar hydrogens be morphed into polar hydrogens."
                />
            
              <param name="H2Heavy" type="boolean"
                  
                  label="H2Heavy" help="Should hydrogen be morphed into a heavy atom."
                />
            
              <param name="RingsOnly" type="boolean"
                  
                  label="RingsOnly" help="Should rings only be used in the MCS search and alignemnt."
                />
            
              <param name="dMCS" type="boolean"
                  
                  label="dMCS" help="Should the distance criterium be also applied in the MCS based search."
                />
            
              <param name="swap" type="boolean"
                  
                  label="swap" help="Try swapping the molecule order which would be a cross-check and require double execution time."
                />
            
              <param name="nochirality" type="boolean"
                  checked="true"
                  label="nochirality" help="Perform chirality check for MCS mapping."
                />
            
              <param name="distance" type="float"
                  value="0.05"
                  
                  label="distance" help="Distance (nm) between atoms to consider them morphable for alignment approach." optional="false"/>
            
              <param name="timeout" type="integer"
                  value="10"
                  
                  label="timeout" help="Maximum time (s) for an MCS search." optional="false"/>
            
              <param name="output_pairs1_path_format" type="select" label="output_pairs1_path_format" help="Format of the output file" multiple="false">
                  
                    <option value="dat"
                      
                    >dat
                       
                    </option>
                  
                    <option value="txt"
                      
                    >txt
                       
                    </option>
                  
                </param>
            
              <param name="output_pairs2_path_format" type="select" label="output_pairs2_path_format" help="Format of the output file" multiple="false">
                  
                    <option value="dat"
                      
                    >dat
                       
                    </option>
                  
                    <option value="txt"
                      
                    >txt
                       
                    </option>
                  
                </param>
            
              <param name="output_log_path_format" type="select" label="output_log_path_format" help="Format of the output file" multiple="false">
                  
                    <option value="log"
                      
                    >log
                       
                    </option>
                  
                    <option value="txt"
                      
                    >txt
                       
                    </option>
                  
                    <option value="out"
                      
                    >out
                       
                    </option>
                  
                </param>
            
              <param name="output_score_path_format" type="select" label="output_score_path_format" help="Format of the output file" multiple="false">
                  
                    <option value="dat"
                      
                    >dat
                       
                    </option>
                  
                    <option value="txt"
                      
                    >txt
                       
                    </option>
                  
                </param>
            
          </section>
    </inputs>
    <outputs>
        
        <data name="output_pairs1_path" format="text" label="${outname_output_pairs1_path}">
            <change_format>
            
            <when input="properties.output_pairs1_path_format" value="dat" format="dat" />
            
            <when input="properties.output_pairs1_path_format" value="txt" format="txt" />
            
            </change_format>
          </data>
        
        <data name="output_pairs2_path" format="text" label="${outname_output_pairs2_path}">
            <change_format>
            
            <when input="properties.output_pairs2_path_format" value="dat" format="dat" />
            
            <when input="properties.output_pairs2_path_format" value="txt" format="txt" />
            
            </change_format>
          </data>
        
        <data name="output_log_path" format="text" label="${outname_output_log_path}">
            <change_format>
            
            <when input="properties.output_log_path_format" value="log" format="log" />
            
            <when input="properties.output_log_path_format" value="txt" format="txt" />
            
            <when input="properties.output_log_path_format" value="out" format="out" />
            
            </change_format>
          </data>
        
        
          <data name="output_structure1_path" format="pdb" label="${outname_output_structure1_path}"/>
        
        
          <data name="output_structure2_path" format="pdb" label="${outname_output_structure2_path}"/>
        
        
          <data name="output_morph1_path" format="pdb" label="${outname_output_morph1_path}"/>
        
        
          <data name="output_morph2_path" format="pdb" label="${outname_output_morph2_path}"/>
        
        
          <data name="output_scaffold1_path" format="ndx" label="${outname_output_scaffold1_path}"/>
        
        
          <data name="output_scaffold2_path" format="ndx" label="${outname_output_scaffold2_path}"/>
        
        <data name="output_score_path" format="text" label="${outname_output_score_path}">
            <change_format>
            
            <when input="properties.output_score_path_format" value="dat" format="dat" />
            
            <when input="properties.output_score_path_format" value="txt" format="txt" />
            
            </change_format>
          </data>
        
    </outputs>
    <tests>
        <test>
          <param name="sele" value="option1"/>
          <param name="properties" value="data/config/config_editconf.json"/>
        </test>
    </tests>
    <help>
.. class:: infomark

Check the syntax for the tool parameters at the original library documentation: https://biobb_pmx.readthedocs.io/en/latest

-----

.. image:: http://mmb.irbbarcelona.org/biobb/assets/layouts/layout3/img/logo.png
    :width: 150

**https://mmb.irbbarcelona.org/biobb**

.. image:: https://bioexcel.eu/wp-content/uploads/2019/08/Bioexcel_logo_no_subheading_660px.png
        :width: 150

**https://bioexcel.eu**
   </help>

    <citations>
        <citation type="bibtex">
            @misc{githubbiobb,
            author = {Andrio P, Bayarri, G., Hospital A, Gelpi JL},
            year = {2019-21},
            title = {biobb: BioExcel building blocks },
            publisher = {GitHub},
            journal = {GitHub repository},
            url = {https://github.com/bioexcel/biobb_pmx},
            }
        </citation>
        <citation type="doi">10.1038/s41597-019-0177-4</citation>
    </citations>
</tool>