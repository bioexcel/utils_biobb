<tool id="biobb_pytorch_apply_mdae_ext" name="ApplyMdae" version="4.2.1" >
    <description>: Apply a Molecular Dynamics AutoEncoder (MDAE) PyTorch model.</description>
    <requirements>
        <requirement type="package"
        version="4.2.1"
        >biobb_pytorch</requirement>
    </requirements>
    <command detect_errors="aggressive"><![CDATA[
        
          ln -f -s ${input_data_npy_path} ${input_data_npy_path}_`echo $$`.${input_data_npy_path.ext};
        
          ln -f -s ${input_model_pth_path} ${input_model_pth_path}_`echo $$`.${input_model_pth_path.ext};
        
        #if $config.sele == "option1":
            ln -s -f ${config.properties} ${config.properties}_`echo $$`.${config.properties.ext};
          #end if

        apply_mdae

        #if $config.sele == "option1":
            --config ${config.properties}_`echo $$`.${config.properties.ext}
          #else if $config.sele == "option2":
            --config '${config.jsonstr}'
          #else if $config.sele == "option3":
            --config '__oc____dq__batch_size__dq__:${properties.batch_size},__dq__latent_dimensions__dq__:${properties.latent_dimensions},__dq__num_layers__dq__:${properties.num_layers},__dq__input_dimensions__dq__:${properties.input_dimensions},__dq__output_dimensions__dq__:${properties.output_dimensions}__cc__'
          #end if
        
          #if str($input_data_npy_path) != 'None':
            --input_data_npy_path ${input_data_npy_path}_`echo $$`.${input_data_npy_path.ext}
          #end if
        
          #if str($input_model_pth_path) != 'None':
            --input_model_pth_path ${input_model_pth_path}_`echo $$`.${input_model_pth_path.ext}
          #end if
        
        
          --output_reconstructed_data_npy_path $outname_output_reconstructed_data_npy_path
        
          --output_latent_space_npy_path $outname_output_latent_space_npy_path
        ;
        #if $config.sele == "option1":
            rm -f ${config.properties}_`echo $$`.${config.properties.ext};
          #end if
        
          rm -f ${input_data_npy_path}_`echo $$`.${input_data_npy_path.ext};
        
          rm -f ${input_model_pth_path}_`echo $$`.${input_model_pth_path.ext};
        
        
          if test -f $outname_output_reconstructed_data_npy_path; then mv $outname_output_reconstructed_data_npy_path $output_reconstructed_data_npy_path; fi;
        
          if test -f $outname_output_latent_space_npy_path; then mv $outname_output_latent_space_npy_path $output_latent_space_npy_path; fi;
        
    ]]>
    </command>
    <inputs>
        
          <param name="input_data_npy_path" type="data" format="npy"  optional="False" label="input NPY file" help="Path to the input data file. Format: [input].npy"/>
        
          <param name="input_model_pth_path" type="data" format="pth"  optional="False" label="input PTH file" help="Path to the input model file. Format: [input].pth"/>
        
        
          <param name="outname_output_reconstructed_data_npy_path" type="text" value="myapply_mdae.npy"
              optional="False" label="output NPY name"
              help="Path to the output reconstructed data file Format: [output].npy "/>
        
          <param name="outname_output_latent_space_npy_path" type="text" value="myapply_mdae.npy"
              optional="True" label="output NPY name"
              help="Path to the reduced dimensionality file Format: [output].npy "/>
        
        <conditional name="config">
            <param name="sele" type="select" label="Take tool settings:" help="Select where tool settings are to be read from">
              <option value="option3">Manual Input</option>
              <option value="option1">from configuration file</option>
              <option value="option2">from JSON string</option>
            </param>
            <when value="option1">
              <param name="properties" type="data" format="yml,json" optional="false" label="Configuration file" help="File containing tool settings. See below for the syntax"/>
            </when>
            <when value="option2">
              <param name="jsonstr" type="text" value="{}" optional="false" label="JSON string" help="JSON string containing tool settings. See below for the syntax"/>
            </when>
            <when value="option3">
            </when>
          </conditional>
          <section name="properties" title="Properties Input">
            
              <param name="batch_size" type="integer"
                  value="1"
                  
                  label="batch_size" help="number of samples/frames per batch." optional="false"/>
            
              <param name="latent_dimensions" type="integer"
                  value="2"
                  
                  label="latent_dimensions" help="min dimensionality of the latent space." optional="false"/>
            
              <param name="num_layers" type="integer"
                  value="4"
                  
                  label="num_layers" help="number of layers in the encoder/decoder (4 to encode and 4 to decode)." optional="false"/>
            
              <param name="input_dimensions" type="integer"
                  
                  
                  label="input_dimensions" help="input dimensions by default it should be the number of features in the input data (number of atoms * 3 corresponding to x, y, z coordinates)." optional="true"/>
            
              <param name="output_dimensions" type="integer"
                  
                  
                  label="output_dimensions" help="output dimensions by default it should be the number of features in the input data (number of atoms * 3 corresponding to x, y, z coordinates)." optional="true"/>
            
          </section>
    </inputs>
    <outputs>
        
        
          <data name="output_reconstructed_data_npy_path" format="npy" label="${outname_output_reconstructed_data_npy_path}"/>
        
        
          <data name="output_latent_space_npy_path" format="npy" label="${outname_output_latent_space_npy_path}"/>
        
    </outputs>
    <tests>
        <test>
          <param name="sele" value="option1"/>
          <param name="properties" value="data/config/config_editconf.json"/>
        </test>
    </tests>
    <help>
.. class:: infomark

Check the syntax for the tool parameters at the original library documentation: https://biobb_pytorch.readthedocs.io/en/latest

-----

.. image:: http://mmb.irbbarcelona.org/biobb/assets/layouts/layout3/img/logo.png
    :width: 150

**https://mmb.irbbarcelona.org/biobb**

.. image:: https://bioexcel.eu/wp-content/uploads/2019/08/Bioexcel_logo_no_subheading_660px.png
        :width: 150

**https://bioexcel.eu**
   </help>

    <citations>
        <citation type="bibtex">
            @misc{githubbiobb,
            author = {Andrio P, Bayarri, G., Hospital A, Gelpi JL},
            year = {2019-21},
            title = {biobb: BioExcel building blocks },
            publisher = {GitHub},
            journal = {GitHub repository},
            url = {https://github.com/bioexcel/biobb_pytorch},
            }
        </citation>
        <citation type="doi">10.1038/s41597-019-0177-4</citation>
    </citations>
</tool>